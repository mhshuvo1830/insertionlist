#include<stdio.h>
#include<stdlib.h>
#define max 4

stack_arr[max];
int top=-1;
int isFull()
{
    if(top==max-1)
    {
        return 1;//stack is full
    }
    else
    {

        return 0;//stack is not full
    }
}
int isEmpty()
{
    if(top==-1)
    {

        return 1;//stack empty
    }
    else
    {
        return 0;//stack is not empty
    }
}
void push(int data)
{
    if(isFull())
    {
        printf("STACK OVERFLOW");
        return;
    }
    top=top+1;
    stack_arr[top]=data;

}
int pop()
{
    if(isEmpty())
    {
        printf("STACK UNDERFLOW");
        exit(1);

    }
    int value;
    value=stack_arr[top];
    top=top-1;
    return value;
}
int peek()
{
    if(isEmpty())
    {
        printf("stack underflow\n");
        exit(1);
    }
    return stack_arr[top];
}
void print()
{
    if(top==-1)
    {
        printf("STACK UNDERFLOW");
    }

    for(int i=top;i>=0;i--)
    {
        printf(" %d \n",stack_arr[i]);
    }
    printf("\n");
}

int main()
{
    int choice, data;
     while(1)
     {
        printf("1.push\n");
        printf("2.pop\n");
        printf("3.print the top element\n");
        printf("4.print all the element of stack\n");
        printf("5.exit\n");
        printf("please enter your choice : ");
        scanf("%d",&choice);
        printf("\n");

        switch(choice)
        {
        case 1:
            printf("Enter the element to be pushed : ");
            scanf("%d",&data);
            push(data);
            printf("\n");
            break;
        case 2:
            data=pop();
            printf("deleted element : %d\n",data);
            printf("\n");
            break;
        case 3 :
            printf("the top most element of stack  : %d\n",peek());
            break;
        case 4:
            print();
            break;
        case 5:
            exit(1);
        default :
            printf("wrong choice\n");
        }
     }
    return 0;
}
